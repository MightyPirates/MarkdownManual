buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'idea'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return 'unknown'
    }
}

version = "${semver}+${getGitRef()}"
group = 'li.cil.markdown_manual'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    maven {
        url 'https://cursemaven.com'
        content { includeGroup "curse.maven" }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Just for in-dev convenience. Mod doesn't use any JEI APIs.
    implementation fg.deobf("curse.maven:jei-238222:3530253")
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                markdown_manual {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                markdown_manual {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            args '--mod', 'markdown_manual', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                markdown_manual {
                    source sourceSets.main
                }
            }
        }
    }
}

task copyGeneratedResources(type: Copy) {
    from 'src/generated'
    into 'src/main'
    exclude 'resources/.cache'
}

jar {
    finalizedBy 'reobfJar'

    manifest {
        attributes([
            'Specification-Title'     : 'markdown_manual',
            'Specification-Vendor'    : 'Sangar',
            'Specification-Version'   : '1',
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : "${semver}",
            'Implementation-Vendor'   : 'Sangar',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'li/cil/manual/api/**'
}

artifacts {
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact apiJar
        }
    }
    repositories {
        maven {
            url System.getenv('MAVEN_PATH')
        }
    }
}

curseforge {
    final def curseForgeApiKey = System.getenv('CURSEFORGE_API_KEY')
    apiKey = curseForgeApiKey ? curseForgeApiKey : ""
    project {
        id = curse_project_id
        releaseType = curse_project_releaseType
        changelogType = 'markdown'
        changelog = file('changelog.md')
        addGameVersion 'Forge'
        addGameVersion minecraft_version
        addGameVersion 'Java 8'
    }
}
