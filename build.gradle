buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def getGitRef() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Throwable e) {
        return "unknown"
    }
}

final def semver = "${version_major}.${version_minor}.${version_patch}"

String build_number = System.getenv("PROMOTED_NUMBER");
if (build_number == null)
    build_number = System.getenv("BUILD_NUMBER")
if (build_number == null)
    build_number = getGitRef()

version = "${semver}+${build_number}"
group = mod_group
archivesBaseName = "${mod_name.replace(' ', '-')}-MC${minecraft_version}-Forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    maven { url "http://dvs1.progwml6.com/files/maven" } // JEI
    maven { url "http://maven.cil.li/" } // Markdown Manual
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand([
            'mod_version'          : version,
            'mod_name'             : mod_name,
            'mod_url'              : mod_url,
            'mod_issues_url'       : mod_issues_url,
            'forge_version_min'    : forge_version_min,
            'minecraft_version_min': minecraft_version_min
        ])
    }
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                markdown_manual {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                markdown_manual {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            args '--mod', 'markdown_manual', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                markdown_manual {
                    source sourceSets.main
                }
            }
        }
    }
}

task copyGeneratedResources(type: Copy) {
    from "src/generated"
    into "src/main"
    exclude "resources/.cache"
}

jar {
    finalizedBy 'reobfJar'

    manifest {
        attributes([
            "Specification-Title"     : "markdown_manual",
            "Specification-Vendor"    : "Sangar",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : "${semver}",
            "Implementation-Vendor"   : "Sangar",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    classifier = 'api'
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'li/cil/manual/api/**'
}

artifacts {
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            version "MC${minecraft_version}-Forge-${version}"
            artifact jar
            artifact apiJar
        }
    }
    repositories {
        maven {
            url System.getenv("MAVEN_PATH")
        }
    }
}

curseforge {
    apiKey = project.hasProperty("curseForgeApiKey") ? project.curseForgeApiKey : ""
    project {
        id = curse_project_id
        releaseType = curse_project_releaseType
        changelogType = "markdown"
        changelog = file("changelog.md")
        addGameVersion "Forge"
        addGameVersion minecraft_version
        addGameVersion "Java 8"
    }
}
